CREATE DATABASE blindbox_db;


Blindbox Table
CREATE TABLE blindbox (
  blindbox_id INT PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  price DECIMAL(10, 2) NOT NULL,
  stock_quantity INT NOT NULL,
  category_id INT NOT NULL,
  rating DECIMAL(3, 2) CHECK (rating >= 1.00 AND rating <= 5.00),
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (category_id) REFERENCES category(category_id)
);
Blindboximage Table
CREATE TABLE blindboximage (
  blindbox_image_id INT PRIMARY KEY,
  blindbox_id INT NOT NULL,
  image_url VARCHAR(255) NOT NULL,
  alt_text VARCHAR(255) NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (blindbox_id) REFERENCES blindbox(blindbox_id)
);
Cart Table
CREATE TABLE cart (
  cart_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES user(user_id)
);
Cartitem Table
CREATE TABLE cartitem (
  cart_item_id INT PRIMARY KEY,
  cart_id INT NOT NULL,
  product_id INT NOT NULL,
  quantity INT NOT NULL,
  price DECIMAL(10, 2) NOT NULL,
  blindbox_id INT,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (cart_id) REFERENCES cart(cart_id),
  FOREIGN KEY (product_id) REFERENCES product(product_id),
  FOREIGN KEY (blindbox_id) REFERENCES blindbox(blindbox_id)
);
Category Table
CREATE TABLE category (
  category_id INT PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);
Customersupport Table
CREATE TABLE customersupport (
  support_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  order_id INT NOT NULL,
  question TEXT NOT NULL,
  response TEXT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES user(user_id),
  FOREIGN KEY (order_id) REFERENCES orders(order_id)
);
Discount Table
CREATE TABLE discount (
  discount_id INT PRIMARY KEY,
  code VARCHAR(50) NOT NULL UNIQUE,
  percentage DECIMAL(4, 2) NOT NULL,
  valid_from DATETIME NOT NULL,
  valid_until DATETIME NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);
Orderdetail Table
CREATE TABLE orderdetail (
  order_detail_id INT PRIMARY KEY,
  order_id INT NOT NULL,
  product_id INT NOT NULL,
  quantity INT NOT NULL,
  price DECIMAL(10, 2) NOT NULL,
  blindbox_id INT,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (order_id) REFERENCES orders(order_id),
  FOREIGN KEY (product_id) REFERENCES product(product_id),
  FOREIGN KEY (blindbox_id) REFERENCES blindbox(blindbox_id)
);
Orders Table
CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  gacha_type VARCHAR(50) NOT NULL,
  discount_id INT NULL,
  order_date DATETIME NOT NULL,
  total_amount DECIMAL(10, 2) NOT NULL,
  status VARCHAR(50) NOT NULL,
  payment_status VARCHAR(50) NOT NULL,
  shipping_status VARCHAR(50) NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES user(user_id),
  FOREIGN KEY (discount_id) REFERENCES discount(discount_id)
);
Payment Table
CREATE TABLE payment (
  payment_id INT PRIMARY KEY,
  order_id INT NOT NULL,
  user_id INT NOT NULL,
  amount DECIMAL(10, 2) NOT NULL,
  status VARCHAR(50) NOT NULL,
  method VARCHAR(50) NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  transaction_id VARCHAR(100) NOT NULL UNIQUE,
  FOREIGN KEY (order_id) REFERENCES orders(order_id),
  FOREIGN KEY (user_id) REFERENCES user(user_id)
);
Product Table
CREATE TABLE product (
  product_id INT PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  price DECIMAL(10, 2) NOT NULL,
  stock_quantity INT NOT NULL,
  category_id INT NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (category_id) REFERENCES category(category_id)
);
Productimage Table
CREATE TABLE productimage (
  product_image_id INT PRIMARY KEY,
  product_id INT NOT NULL,
  image_url VARCHAR(255) NOT NULL,
  alt_text VARCHAR(255) NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (product_id) REFERENCES product(product_id)
);
Result Table
CREATE TABLE result (
  result_id INT PRIMARY KEY,
  order_id INT NOT NULL,
  result_text TEXT NULL,
  blindbox_id INT,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (order_id) REFERENCES orders(order_id),
  FOREIGN KEY (blindbox_id) REFERENCES blindbox(blindbox_id)
);
Review Table
CREATE TABLE review (
  review_id INT PRIMARY KEY,
  product_id INT NOT NULL,
  blindbox_id INT NOT NULL,
  user_id INT NOT NULL,
  rating INT NOT NULL CHECK (rating >= 1 AND rating <= 5),
  review_text TEXT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (product_id) REFERENCES product(product_id),
  FOREIGN KEY (blindbox_id) REFERENCES blindbox(blindbox_id),
  FOREIGN KEY (user_id) REFERENCES user(user_id)
);
Role Table
CREATE TABLE role (
  role_id INT PRIMARY KEY,
  name VARCHAR(50) NOT NULL
);
Shipment Table
CREATE TABLE shipment (
  shipment_id INT PRIMARY KEY,
  order_id INT NOT NULL,
  address TEXT NOT NULL,
  method VARCHAR(50) NOT NULL,
  status VARCHAR(50) NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (order_id) REFERENCES orders(order_id)
);
User Table
CREATE TABLE user (
  user_id INT PRIMARY KEY,
  username VARCHAR(50) NOT NULL UNIQUE,
  email VARCHAR(255) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL,
  phone VARCHAR(20) NOT NULL UNIQUE CHECK (phone LIKE '[0-9]%'),
  address TEXT NULL,
  role_id INT NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  fullname VARCHAR(255) NOT NULL,
  FOREIGN KEY (role_id) REFERENCES role(role_id)
);
Wishlist Table
CREATE TABLE wishlist (
  wishlist_id INT PRIMARY KEY,
  user_id INT NOT NULL,
  product_id INT NOT NULL,
  blindbox_id INT NOT NULL,
  created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (user_id) REFERENCES user(user_id),
  FOREIGN KEY (product_id) REFERENCES product(product_id),
  FOREIGN KEY (blindbox_id) REFERENCES blindbox(blindbox_id)
);
